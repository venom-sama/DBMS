                                                         Problem Statement: -7
                                                         Unnamed PL/SQLcode block: Use of Control structure and Exception handling is
                                                         mandatory.
                                                         Suggested Problem statement:
                                                         Consider Tables:
                                                         1. Borrower (Roll_no, Name, Date_of_Issue, Name_of_Book, Status)
                                                         2. Fine (Roll_no, Date, Amt)
                                                         ● Accept Roll_no and Name_of_Book from user.
                                                         ● Check the number of days (from Date_of_Issue).
                                                         ● If days are between 15 to 30 then fine amount will be Rs 5per day.
                                                         ● If no. of days>30, per day fine will be Rs 50 per day and for days less than 30, Rs. 5 per
                                                         day.
                                                         ● After submitting the book, status will change from I to R.
                                                         ● If condition of fine is true, then details will be stored into fine table.

create database ps7;
use ps7;
create table borrower(rollno int primary key,
date_of_issue date,
name_of_book varchar(100),
status varchar(10));
create table fine(rollno int,Date date,amt decimal(10,2));
insert into borrower values
(1,"2024-7-11","DBMS","I"),
(2,"2024-9-15","AI","I"),
(3,"2024-10-30","CN","I"),
(4,"2024-10-01","HCI","I");
delimiter //
create procedure calfine2(IN rno int,IN bookName varchar(100))
begin
declare dateofIssue date;
declare stat varchar(10);
declare days_late int;
declare fine_amt decimal(10,2);
declare exit handler for SQLEXCEPTION select "Record not found";
select date_of_issue,status into dateofIssue,stat from borrower where rollno=rno and name_of_book=bookName;
set days_late=DATEDIFF(CURDATE(),dateofIssue);
IF days_late > 30 then
set fine_amt=days_late*50;
else
set fine_amt=days_late*5;
end if;
insert into fine values(rno,dateofIssue,fine_amt);
update borrower
set status='R'
where rollno=rno and name_of_book=bookName;
end //
delimiter ;
call calfine2(1,"DBMS");
select * from fine;
select * from borrower;






//explaination 
This code manages a library system, calculating fines for borrowed books based on the number of days they are overdue. Here’s a step-by-step explanation:

### 1. Database and Table Setup

1. **Create Database**:
   ```sql
   create database ps7;
   use ps7;
   ```
   - Creates and selects the database `ps7` to work within.

2. **Create `borrower` Table**:
   ```sql
   create table borrower(
     rollno int primary key,
     date_of_issue date,
     name_of_book varchar(100),
     status varchar(10)
   );
   ```
   - Creates a `borrower` table to track information about borrowed books:
     - `rollno`: Unique identifier for each borrower.
     - `date_of_issue`: The date the book was issued.
     - `name_of_book`: Name of the borrowed book.
     - `status`: Indicates if the book is issued ("I") or returned ("R").

3. **Create `fine` Table**:
   ```sql
   create table fine(
     rollno int,
     Date date,
     amt decimal(10,2)
   );
   ```
   - Creates a `fine` table to record fines for each borrower:
     - `rollno`: References the borrower’s roll number.
     - `Date`: The issue date of the book.
     - `amt`: Fine amount charged.

4. **Insert Sample Data into `borrower` Table**:
   ```sql
   insert into borrower values
     (1, "2024-7-11", "DBMS", "I"),
     (2, "2024-9-15", "AI", "I"),
     (3, "2024-10-30", "CN", "I"),
     (4, "2024-10-01", "HCI", "I");
   ```
   - Inserts sample records representing books issued to different borrowers, with status marked as "I" (Issued).

### 2. Define the `calfine2` Stored Procedure

1. **Create Procedure**:
   ```sql
   delimiter //
   create procedure calfine2(IN rno int, IN bookName varchar(100))
   ```
   - Defines the stored procedure `calfine2` that accepts:
     - `rno`: Roll number of the borrower.
     - `bookName`: Name of the borrowed book.

2. **Declare Variables**:
   ```sql
   declare dateofIssue date;
   declare stat varchar(10);
   declare days_late int;
   declare fine_amt decimal(10,2);
   ```
   - Declares variables to store the issue date, status, number of days overdue, and the calculated fine amount.

3. **Exception Handler**:
   ```sql
   declare exit handler for SQLEXCEPTION select "Record not found";
   ```
   - Specifies an exception handler to output "Record not found" if there is an SQL error (e.g., if the borrower or book is not found).

4. **Retrieve Borrower Information**:
   ```sql
   select date_of_issue, status into dateofIssue, stat from borrower where rollno=rno and name_of_book=bookName;
   ```
   - Retrieves the `date_of_issue` and `status` of the specified borrower and book.

5. **Calculate Days Late**:
   ```sql
   set days_late = DATEDIFF(CURDATE(), dateofIssue);
   ```
   - Calculates the number of days late by finding the difference between the current date (`CURDATE()`) and the `date_of_issue`.

6. **Calculate Fine Amount**:
   ```sql
   IF days_late > 30 THEN
     set fine_amt = days_late * 50;
   ELSE
     set fine_amt = days_late * 5;
   END IF;
   ```
   - Sets a different fine amount based on the days late:
     - If overdue by more than 30 days, the fine is `days_late * 50`.
     - Otherwise, the fine is `days_late * 5`.

7. **Insert Fine Record**:
   ```sql
   insert into fine values(rno, dateofIssue, fine_amt);
   ```
   - Inserts a new record into the `fine` table with the borrower’s roll number, issue date, and calculated fine amount.

8. **Update Borrower Status**:
   ```sql
   update borrower set status = 'R' where rollno = rno and name_of_book = bookName;
   ```
   - Updates the `status` in the `borrower` table to "R" (Returned) for the specified borrower and book.

### 3. Execute and View Results

1. **Call the Procedure**:
   ```sql
   call calfine2(1, "DBMS");
   ```
   - Calls the `calfine2` procedure for borrower `1` and the book "DBMS". This calculates the fine and updates the status.

2. **Display Data**:
   ```sql
   select * from fine;
   select * from borrower;
   ```
   - Retrieves and displays all data from the `fine` and `borrower` tables, showing calculated fines and updated statuses.

### Summary

This code defines a procedure to calculate fines for overdue books. Based on the number of days late, a fine is determined and recorded in the `fine` table, while the book’s status is marked as returned in the `borrower` table.
